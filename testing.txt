l1 = "lambda x:int . x"
l2 = "lambda ( ( ( x:int  )  )  ). (  (  (x)  )   )"
l3 = "lambda ((x:int)) (((y : int -> bool))). y x"
l4 = "lambda (x:int) . if (x == 1) then x else x-1*2+3"
l5 = "lambda (x:int) . if (not (x == 1)) then x else x-1*2+3"
l6 = "lambda (x:int) . if ((x == 1) or (x < 3) and (x < (2*11/4))) then x else x-1"
l7 = "lambda (x:int) . x < 3"
l8 = "lambda (x:int) . (x*4) >= (4*11/(2+6))"

a1 = "(lambda x:int . x) 5"
a2 = "(lambda ( ( ( x:int  )  )  ). (  (  (x)  )   )) 5"
a3 = "(lambda ((x:int)) (((y : int -> bool))). y x) 5 (lambda z:int. true)"
a4 = "(lambda (x:int) . if (x == 1) then x else x-1*2+3) 5"
a5 = "(lambda (x:int) . if (not (x == 1)) then x else x-1*2+3) 5"
a6 = "(lambda (x:int) . if ((x == 1) or (x < 3) and (x < (2*11/4))) then x else x-1) 5"
a7 = "(lambda (x:int) . x < 3) 5"
a8 = "(lambda (x:int) . (x*4) >= (4*11/(2+6))) 5"

let1 = "let x = lambda x:int. x in x"
let2 = "let x = lambda x:int. x in ((x))"
let3 = "let x = lambda x:int. ((x)) in ((x))"
let4 = "let x’foo3 = lambda x:int. x in x’foo3"
let5 = "let x = x*4*3+1 in x"
let6 = "let x = lambda x:int. x*4*3+1 in x"
let7 = "let x = (4*2-1*3/4 < 22) and (3-1-4*4 > 47) or (3*2 < -5) in x"
let8 = "let y = 1*2-3*7/4 in y * 4 -3"
let9 = "let x’:int = 3*2-3*7/4 in x’ * 4 -3"
let10 = "let x:int -> int = lambda x:int. x*3-2+11 in x"

letreq1 = "let z = 5 in let rec down:int->int = lambda n:int. if (n<0) then z else down (n-1) in down z"

letreq2 = "let z = 5 in let y = 4 in let rec down:int->int->int = lambda (n:int) (m:int). if (n<0) then z else down (n-1) y in down z y"



